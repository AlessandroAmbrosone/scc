import kfp
from kfp import dsl
from kfp.components import func_to_container_op
import json
from xgboost import XGBRegressor
from sklearn.metrics import accuracy_score


@func_to_container_op
def make_predictions(model, data) -> None:

    data = json.loads(data)

    x_train = data['x_train']
    y_train = data['y_train']
    x_test = data['x_test']
    y_test = data['y_test']

    y_pred = model.predict(x_test)
    accuracy = accuracy_score(y_test, y_pred)

    print(f"Accuracy: {accuracy}")




@dsl.pipeline(name='House Pipeline', description='')
def house_pipeline():

    # Loads the yaml manifest for each component
    load = kfp.components.load_component_from_file('load_data/load_data.yaml')
    create_fetures = kfp.components.load_component_from_file('create_features/create_features.yaml')
    best_param = kfp.components.load_component_from_file('best_param/best_param.yaml')
    train = kfp.components.load_component_from_file('train/train.yaml')

    # Run load_data task
    load_task = load()

    # Run tasks "decison_tree" and "logistic_regression" given
    # the output generated by "load_task".
    create_features_task = create_fetures(load_task.output)
    best_param_task = best_param(create_features_task.output)
    train_task = train(create_features_task.output,best_param_task.output)

    # Given the outputs from "decision_tree" and "logistic_regression"
    # the component "show_results" is called to print the results.
    make_predictions(train_task.output, create_features_task.output)


if __name__ == '__main__':
    kfp.compiler.Compiler().compile(house_pipeline, 'house_pipeline.yaml')